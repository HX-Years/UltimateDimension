apply plugin: "java"

version '1.0'

sourceSets.main.java.srcDirs = ["src"]

repositories{
    mavenCentral()
    maven{ url "https://raw.githubusercontent.com/Zelaux/MindustryRepo/master/repository" }
    maven{ url 'https://www.jitpack.io' }
}

java{
    targetCompatibility = 8
    sourceCompatibility = JavaVersion.VERSION_17
}

ext{
    //the build number that this mod is made for
    mindustryVersion = 'v146'
    uncVersion = "1.8.9"
    jabelVersion = "93fde537c7"
    sdkRoot = System.getenv("ANDROID_HOME") ?: System.getenv("ANDROID_SDK_ROOT")
}

//java 8 backwards compatibility flag
allprojects{
    tasks.withType(JavaCompile){
    	options.fork = true
    	options.forkOptions.jvmArgs.addAll([
    	"--add-opens", "jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED",
    	"--add-opens", "jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED",
    	"--add-opens", "jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED",
    	"--add-opens", "jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED",
    	"--add-opens", "jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED",
    	"--add-opens", "jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED"
  	])

        options.compilerArgs.addAll(['--release', '8'])
    }
}

dependencies{

    compileOnly "com.github.EB-wilson.UniverseCore:mindustry:$uncVersion"//涵盖了大部分mod制作相关的工具
    compileOnly "com.github.EB-wilson.UniverseCore:utilties:$uncVersion"//实用工具集，包含了许多通用工具模块
    compileOnly "com.github.EB-wilson.UniverseCore:abstract:$uncVersion"//功能抽象层，一些平台相关的行为被抽象为接口，要使用平台相关API时必须导入该模块
    compileOnly "com.github.EB-wilson.UniverseCore:implabstract:$uncVersion"//中间实现层，有一些关于mod和加载器的功能
    compileOnly "com.github.EB-wilson.UniverseCore:dynamilizer:$uncVersion"//JDER动态化仓库的内置模块
    compileOnly "com.github.EB-wilson.UniverseCore:annotations:$uncVersion"//包括组件化接口在内的注解处理器
  
    annotationProcessor "com.github.EB-wilson.UniverseCore:annotations:$uncVersion"//使用注解处理器
                
    //以下是通常不会用到的内部模块，但仍然允许导入，便于对一些较为复杂的需求进行自定义行为
    //compileOnly "com.github.EB-wilson.UniverseCore:core:$uncVersion"//仅有一个核心静态容器，保存了所有的功能接口的实现单例
    //compileOnly "com.github.EB-wilson.UniverseCore:android:$uncVersion"//平台相关的功能在安卓的默认实现
    //compileOnly "com.github.EB-wilson.UniverseCore:android26:$uncVersion"//在安卓API26以上的安卓平台运行时的实现
    //compileOnly "com.github.EB-wilson.UniverseCore:desktop:$uncVersion"//平台相关的功能在桌面的默认实现
    //compileOnly "com.github.EB-wilson.UniverseCore:desktop9:$uncVersion"//当桌面版运行时VM版本1.9以上的平台实现

    compileOnly "com.github.Anuken.Arc:arc-core:$mindustryVersion"
    compileOnly "com.github.Anuken.Mindustry:core:$mindustryVersion"

    annotationProcessor "com.github.Anuken:jabel:$jabelVersion"
}

//force arc version
configurations.all{
    resolutionStrategy.eachDependency { details ->
        if(details.requested.group == 'com.github.Anuken.Arc'){
            details.useVersion "$mindustryVersion"
        }
    }
}

task jarAndroid{
    dependsOn "jar"

    doLast{
        if(!sdkRoot || !new File(sdkRoot).exists()) throw new GradleException("No valid Android SDK found. Ensure that ANDROID_HOME is set to your Android SDK directory.");

        def platformRoot = new File("$sdkRoot/platforms/").listFiles().sort().reverse().find{ f -> new File(f, "android.jar").exists()}

        if(!platformRoot) throw new GradleException("No android.jar found. Ensure that you have an Android platform installed.")

        //collect dependencies needed for desugaring
        def dependencies = (configurations.compileClasspath.asList() + configurations.runtimeClasspath.asList() + [new File(platformRoot, "android.jar")]).collect{ "--classpath $it.path" }.join(" ")

        //dex and desugar files - this requires d8 in your PATH
        "d8 $dependencies --min-api 14 --output ${project.archivesBaseName}Android.jar ${project.archivesBaseName}Desktop.jar"
            .execute(null, new File("$buildDir/libs")).waitForProcessOutput(System.out, System.err)
    }
}

jar{
    archiveFileName = "${base.archivesBaseName}Desktop.jar"

    from{
        configurations.runtimeClasspath.collect{ it.isDirectory() ? it : zipTree(it) }
    }

    from(rootDir){
        include "mod.hjson"
    }

    from("assets/"){
        include "**"
    }
}

task deploy(type: Jar){
    dependsOn jarAndroid
    dependsOn jar
    archiveFileName = "${base.archivesBaseName}.jar"

    from{ [zipTree("$buildDir/libs/${project.archivesBaseName}Desktop.jar"), zipTree("$buildDir/libs/${project.archivesBaseName}Android.jar")] }

    doLast{
        delete{
            delete "$buildDir/libs/${project.archivesBaseName}Desktop.jar"
            delete "$buildDir/libs/${project.archivesBaseName}Android.jar"
        }
    }
}
